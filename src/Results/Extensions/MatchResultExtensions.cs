using DA.Results.Issues;

namespace DA.Results.Extensions;

/// <summary>
/// Match:
/// Match the result to a non monadic value, depending on the status of the Result.
/// </summary>
public static class MatchResultExtensions
{
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="result">The result this function is called from.</param>
    /// <param name="successAction">The action to perform if the result is a success</param>
    /// <param name="failureAction">The action to perform if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    public static void Match<TValue>(this Result<TValue> result, Action<TValue> successAction, Action<Issue> failureAction)
    {
        if (result.TryGetValue(out var value, out var issue))
        {
            successAction(value);
        }
        else
        {
            failureAction(issue);
        }
    }
    
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="result">The result this function is called from.</param>
    /// <param name="successTask">The task to perform if the result is a success</param>
    /// <param name="failureTask">The task to perform if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    public static async Task MatchAsync<TValue>(this Result<TValue> result, Func<TValue, Task> successTask, Func<Issue, Task> failureTask)
    {
        if (result.TryGetValue(out var value, out var issue))
        {
            await successTask(value);
        }
        else
        {
            await failureTask(issue);
        }
    }
    
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="result">The result this function is called from.</param>
    /// <param name="successFunc">The function to generate the TOut if the result is a success</param>
    /// <param name="failureFunc">The function to generate the TOut if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    /// <typeparam name="TOut">The resulting type.</typeparam>
    /// <returns>A TOut that is generated by the successFunc or the failureFunc.</returns>
    public static TOut Match<TValue, TOut>(this Result<TValue> result, Func<TValue, TOut> successFunc, Func<Issue, TOut> failureFunc)
    {
        return result.TryGetValue(out var value, out var issue)
            ? successFunc(value)
            : failureFunc(issue);
    }
    
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="result">The result this function is called from.</param>
    /// <param name="successTask">The Task to generate the TOut if the result is a success</param>
    /// <param name="failureTask">The Task to generate the TOut if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    /// <typeparam name="TOut">The resulting type.</typeparam>
    /// <returns>A TOut that is generated by the successFunc or the failureFunc.</returns>
    public static async Task<TOut> MatchAsync<TValue, TOut>(this Result<TValue> result, Func<Task<TOut>> successTask, Func<Task<TOut>> failureTask)
    {
        return result.IsSuccess
            ? await successTask()
            : await failureTask();
    }

    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="result">The result this function is called from.</param>
    /// <param name="successTask">The FuncTask to generate the TOut if the result is a success</param>
    /// <param name="failureTask">The FuncTask to generate the TOut if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    /// <typeparam name="TOut">The resulting type.</typeparam>
    /// <returns>A TOut that is generated by the successFunc or the failureFunc.</returns>
    public static async Task<TOut> MatchAsync<TValue, TOut>(this Result<TValue> result, Func<TValue, Task<TOut>> successTask, Func<Issue, Task<TOut>> failureTask)
    {
        return result.TryGetValue(out var value, out var issue)
            ? await successTask(value)
            : await failureTask(issue);
    }
    
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="resultTask">The Task of a Result this function is called from.</param>
    /// <param name="successAction">The action to perform if the result is a success</param>
    /// <param name="failureAction">The action to perform if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    public static async Task Match<TValue>(this Task<Result<TValue>> resultTask, Action<TValue> successAction, Action<Issue> failureAction)
    {
        var result = await resultTask;
        result.Match(successAction, failureAction);
    }
    
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="resultTask">The Task of a Result this function is called from.</param>
    /// <param name="successFunc">The function to generate the TOut if the result is a success</param>
    /// <param name="failureFunc">The function to generate the TOut if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    /// <typeparam name="TOut">The resulting type.</typeparam>
    /// <returns>A TOut that is generated by the successFunc or the failureFunc.</returns>
    public static async Task<TOut> Match<TValue, TOut>(this Task<Result<TValue>> resultTask, Func<TValue, TOut> successFunc, Func<Issue, TOut> failureFunc)
    {
        var result = await resultTask;
        return result.Match(successFunc, failureFunc);
    }
    
    /// <summary>
    /// Match the result to a non monadic value, depending on the status of the Result.
    /// </summary>
    /// <param name="resultTask">The Task of a Result this function is called from.</param>
    /// <param name="successTask">The task to perform if the result is a success</param>
    /// <param name="failureTask">The task to perform if the result is a failure</param>
    /// <typeparam name="TValue">The type of the result.</typeparam>
    public static async Task MatchAsync<TValue>(this Task<Result<TValue>> resultTask, Func<TValue, Task> successTask, Func<Issue, Task> failureTask)
    {
        var result = await resultTask;
        await result.MatchAsync(successTask, failureTask);
    }
}